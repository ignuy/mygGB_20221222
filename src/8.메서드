/*
    <메서드>

    ◎ 메서드(Method)는 클래스(Class)가 포함하는 멤버(Member) 중 하나로, 호출(Call) 가능한 단위이다.
    ◎ 메서드 명명은 카멜 케이스를 이용하고, 주로 '동사 + 목적어' 의 형태를 가진다.
      가령, `addUser`,`deleteUser` 와 같은 꼴.
      단, 'to 타입' 과 같은 형식(가령 toString 및 toArray 등)을 가지기도 하고, 반환 타입이 논리형(boolean) 인 경우
      3인칭 단수형의 '동사' 를 이름(가령 equals 및 matches 등)으로 가지기도 한다.
    ◎ 메서드의 명명에는 예외가 있을 수 있으나 카멜 케이스를 지키는 것에는 예외가 없다

        [접근 제한자(Access Modifier)] [static|abstract]? [반환타입|void] [메서드 이름] ([메게 변수(Parameter),...]?){
            //구현부
        }
        ->[] 는 실제로 작성하면 안된다. ex) 접근제한자 static|abstract...형태이다.([]없음)
        ->[]:한 묶음 / [A|B] : A,B중의 하나 / void : 반환타입이 없을때 씀. / []? : 유무상관없음(둘중하나가 오거나 아예 없거나)
          ([A,...]?) : (int a) or (int a, int b,...)

            - static : 메서드의 정적여부
            - abstract : 메서드의 추상 여부
            - void : 메서드의 반환 타입이 없음을 의미함.
            - 메서드는 정적이면서 추상적일 수 없음에 유의한다. ( static abstract 를 둘다 적으면 안됨.)
            - 메서드가 추상적일 경우 구현부 ( { , } ) 를 가지지 않아야 하며 세미콜론(;) 으로 끝내야 한다.

        public abstract void someAbstractMethod(); //추상 메서드의 예

        public static void main(String[] args){
            //...
        }

            - 접근 제한자는 public 이다.
            - 정적이고( static ) 추상적 ( abstract ) 이지 않다.
            - 반환 타입이 없다.
            - 메서드의 이름은 main 이다.
            - 매개 변수는 String[] 타입의 args 한개가 있다.



    <return>

    ◎ return 키워드는 어떠한 메서드의 반환 타입이 있을 때( void 가 아닐때) 해당 메서드의 호출 결과를 반환(Return) 해주기 위해
      사용 하는 키워드이다. return 반환값; 형식으로 사용한다
    ◎ 메서드의 반환 타입이 있는 경우 ( void 가 아닐 때) 모든 경우의 수에서 반환 값을 반환하는 구문이 작성되어야만 한다.
    ◎ 메서드의 반환 타입이 없을 때 ( void 일때) 에도 사용할 수 있는데 단순히 return; 로 사용할 수 있다.
    ◎ 반환 값의 유무와 관계 없이 return 은 해당 메서드의 실행을 즉시 중단시킨다.



    <호출>

    ◎ 메서드를 호출(Call)하기 위해서는 해당 메서드를 멤버로 가지고 있는 클래스(혹은 객체)에 접근하여 메서드 이름을 적고 괄호 안에 요구되는
      매게 변수의 구조와 일치하는 전달 인자를 전달해야 한다.

*/